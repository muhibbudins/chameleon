#! /usr/bin/env node

const fs = require('fs')
const path = require('path')
const read = require('read-yaml')
const chalk = require('chalk')
const build = require('../src/build')
const start = require('../src/start')
const program = require('commander')
const package = require('../package')
const project = process.cwd()
const chameleon = __dirname
const timestamp = require('log-timestamp')

timestamp(() => {
  return `
    ${chalk.green(`[${new Date().toLocaleTimeString()}]`)}
  `.replace(/ PM| AM/g, '').trim()
})

const write = console.log

const info = (message) => {
  return `${chalk.cyan('[info]')} ${message}`
}
const done = (message) => {
  return `${chalk.green('[done]')} ${message}`
}
const error = (message) => {
  return `${chalk.red('[fail]')} ${message}`
}

program
  .usage('[command] [options]')
  .version(`Chameleon CLI v${package.version}`, '-v, --version')

program
  .command('generate')
  .usage('chame generate')
  .description('Generate chameleon project')
  .action((option) => {
    write(info(`Using Chameleon ${package.version}`))

    const chameyaml = path.resolve(project, 'chameleon.yml')

    if (!fs.existsSync(chameyaml)) {
      write(error('Chameleon config doesn\'t exists, make sure you\'ve already read a docs.'))
      write(error('Read a documentation here https://github.com/nakama-design/chameleon#config'))

      process.exit(0)
    }
    
    write(info('Getting Chameleon configuration'))
    build(
      read.sync(chameyaml),
      chameleon,
      project,
      write,
      info,
      done,
      error
    )
    .then(() => {
      write(done('Docs already generated'))
    })
  })

program
  .command('start')
  .usage('chame start')
  .description('start chameleon project')
  .action((option) => {
    write(info(`Using Chameleon ${package.version}`))

    const chameyaml = path.resolve(project, 'chameleon.yml')

    if (!fs.existsSync(chameyaml)) {
      write(error('Chameleon config doesn\'t exists, make sure you\'ve already read a docs.'))
      write(error('Read a documentation here https://github.com/nakama-design/chameleon#config'))

      process.exit(0)
    }

    start(
      project,
      read.sync(chameyaml),
      write,
      info,
      done,
      error
    )
    .then(() => {
      write(done('Docs already generated'))
    })
  })

program.parse(process.argv)

if (program.args.length === 0) {
  console.log(`
  Welcome to Chameleon CLI v${package.version},
  Use ${chalk.green.bold('chameleon --help')} to show help message.
  `)
}