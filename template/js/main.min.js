'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const pageData = {
  config: {},
  content: {}
};
const accordion = document.querySelector('.accordion');
const selectGroup = document.querySelector('#filterGroup');

const getClass = method => {
  switch (method) {
    case 'POST':
      return 'card-field_success';
    case 'PUT':
      return 'card-field_info';
    case 'PATCH':
      return 'card-field_warning';
    case 'DELETE':
      return 'card-field_danger';
    default:
      return 'card-field_primary';
  }
};

const getBackroundColor = method => {
  switch (method) {
    case 'POST':
      return '#17C671';
    case 'PUT':
      return '#00B8D8';
    case 'PATCH':
      return '#FFB400';
    case 'DELETE':
      return '#C4183C';
    default:
      return '#007BFF';
  }
};

const filterSearch = value => {
  let group = {};
  let bracket = [];

  if (value.length > 3) {
    Object.keys(pageData['content']).map(group => {
      const result = pageData['content'][group]['routes'].filter(route => {
        return route['name'].toLowerCase().indexOf(value.toLowerCase()) > -1 || route['description'].toLowerCase().indexOf(value.toLowerCase()) > -1 || route['route'].toLowerCase().indexOf(value.toLowerCase()) > -1;
      });

      if (result.length > 0) {
        bracket[group] = {
          group: group,
          routes: result
        };
      }
    });

    accordion.innerHTML = '';
    renderPage(bracket);
  } else {

    accordion.innerHTML = '';
    renderPage(pageData['content']);
  }
};

const filterGroup = value => {
  let bracket = {};

  accordion.innerHTML = '';

  if (pageData['content'][value]) {
    bracket[value] = pageData['content'][value];
  } else {
    bracket = pageData['content'];
  }

  renderPage(bracket);
};

const createUnique = () => {
  return Math.random().toString(36).substr(2, 16);
};

const createListener = () => {
  const listItem = document.querySelectorAll('.card-row_data');
  listItem.forEach(element => {
    element.addEventListener('click', () => {
      element.scrollIntoView({
        block: 'start',
        behavior: 'smooth'
      });
    }, false);
  });

  hljs.initHighlightingOnLoad();
  new ClipboardJS('[data-clipboard-target]');
};

const createGroup = name => {
  return '\n    <div class="card-row card-row_group" id="' + String(createUnique()) + '">\n      <div class="card-field">\n        <div class="card-field_name">Group ' + String(name) + '</div>\n      </div>\n    </div>\n  ';
};

const createDummy = type => {
  switch (type) {
    case 'Integer':
      return 123456;

    default:
      return 'John Doe';
  }
};

const createParameter = obj => {
  if (obj['parameter']) {
    const bracket = {};
    const types = obj['method'] === 'GET' ? 'param' : 'data';

    Object.keys(obj['parameter']).map(item => {
      bracket[item] = createDummy(obj['parameter'][item]);
    });

    return ', {\n      ' + types + ': ' + String(JSON.stringify(bracket, false, 4)) + '\n    }';
  }
  return '';
};

const createRequest = (obj, config) => {
  return ('\n    axios\n  .' + String(obj['method'].toLowerCase()) + '(\'' + String(config['endpoint'] + config['path'] + obj['route']) + '\'' + String(createParameter(obj)) + ')\n  .then(res => {\n    console.log(res)\n  })\n  ').trim();
};

const createField = (obj, config, index, sub) => {
  return '\n    <div class="card-row card-row_data" id="' + String(createUnique()) + '">\n      <div class="card-field" data-toggle="collapse" data-target="#collapse-' + String(index) + '-' + String(sub) + '" aria-expanded="true" aria-controls="collapse-' + String(index) + '-' + String(sub) + '">\n        <div class="card-field_name">' + String(obj['name']) + '</div>\n        <div class="card-field_route">' + String(config['path'] + obj['route']) + '</div>\n        <div class="card-field_description">' + String(obj['description']) + '</div>\n        <div class="card-field_method ' + String(getClass(obj['method'])) + '">' + String(obj['method']) + '</div>\n      </div>\n      <div id="collapse-' + String(index) + '-' + String(sub) + '" class="collapse" aria-labelledby="heading-' + String(index) + '-' + String(sub) + '" data-parent="#accordion">\n        <div class="collapse-inner">\n          <div class="content-left">\n            <div class="content-title">\n              <span style="background-color: ' + String(getBackroundColor(obj['method'])) + ';">' + String(obj['method']) + '</span>\n              ' + String(obj['name']) + '\n            </div>\n            <div class="content-description">\n              ' + String(obj['description']) + '\n            </div>\n            <div class="content-route">\n              <div id="route-path-' + String(index) + '-' + String(sub) + '">\n                ' + String(config['endpoint'] + config['path'] + obj['route']) + '\n              </div>\n              <button class="btn btn-default" data-clipboard-target="#route-path-' + String(index) + '-' + String(sub) + '">Copy</button>\n            </div>\n            <div class="content-description">\n              Example Request\n            </div>\n            <div class="content-route">\n              <div id="request-' + String(index) + '-' + String(sub) + '">\n                <pre><code class="javascript">' + String(createRequest(obj, config)) + '</code></pre>\n              </div>\n              <button class="btn btn-default" data-clipboard-target="#request-' + String(index) + '-' + String(sub) + '">Copy</button>\n            </div>\n          </div>\n          <div class="content-right">\n            <div class="content-code">Response</div>\n            <pre><code class="json">' + String(JSON.stringify(obj['response'], false, 4)) + '</code></pre>\n          </div>\n        </div>\n      </div>\n    </div>\n  ';
};

const getConfig = (() => {
  var _ref = _asyncToGenerator(function* () {
    return yield fetch('data/config.json').then(function (res) {
      return res.json();
    });
  });

  return function getConfig() {
    return _ref.apply(this, arguments);
  };
})();

const renderPage = content => {
  const data = [];
  const rendered = content || pageData['content'];

  Object.keys(rendered).map(index => {
    data.push(createGroup(rendered[index]['group']));

    if (rendered[index]['routes']) {
      rendered[index]['routes'].map((item, key) => {
        data.push(createField(item, pageData['config'], index, key));
      });
    }
  });

  accordion.insertAdjacentHTML('beforeEnd', data.join('\n'));

  createListener();
};

const generate = (() => {
  var _ref2 = _asyncToGenerator(function* () {
    const config = yield getConfig();

    yield fetch('data/routes.json').then(function (res) {
      return res.json();
    }).then(function (res) {
      pageData['config'] = config;
      pageData['content'] = res;

      const group = [];

      Object.keys(res).map(function (index) {
        group.push('<option value="' + String(index) + '">Group ' + String(index) + '</option>');
      });

      selectGroup.insertAdjacentHTML('beforeEnd', group.join('\n'));

      renderPage();
    });
  });

  return function generate() {
    return _ref2.apply(this, arguments);
  };
})();

generate();
